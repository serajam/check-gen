// Code generated by check-gen; DO NOT EDIT.
// Package inner contains models and autogenerated validation code
package inner

import (
	"unicode/utf8"
)

// Validate validates struct accordingly to fields tags
func (i Inner) Validate() []string {
	var errs []string
	if i.Name == "" {
		errs = append(errs, "name::is_required")
	}
	if utf8.RuneCountInString(i.Name) < 1 {
		errs = append(errs, "name::min_length_is::1")
	}
	if utf8.RuneCountInString(i.Name) > 100 {
		errs = append(errs, "name::max_length_is::100")
	}
	if i.Value == 0 {
		errs = append(errs, "value::is_required")
	}
	if i.Value < 1 {
		errs = append(errs, "value::min_value_is::1")
	}
	if i.Value > 100 {
		errs = append(errs, "value::max_value_is::100")
	}

	return errs
}

// Validate validates struct accordingly to fields tags
func (m MapStruct) Validate() []string {
	var errs []string
	if m.SpacesMapStruct == nil || len(m.SpacesMapStruct) == 0 {
		errs = append(errs, "spaces_map_struct::is_required")
	}
	if len(m.SpacesMapStruct) > 1 {
		errs = append(errs, "spaces_map_struct::max_length_is::1")
	}
	if m.SpacesSliceStruct == nil || len(m.SpacesSliceStruct) == 0 {
		errs = append(errs, "spaces_slice_struct::is_required")
	}
	for _, v := range m.SpacesSliceStruct {
		if e := v.Validate(); len(e) > 0 {
			errs = append(errs, e...)
		}
	}
	if m.SpacesMapInnerRef == nil || len(m.SpacesMapInnerRef) == 0 {
		errs = append(errs, "spaces_map_inner_ref::is_required")
	}
	for _, v := range m.SpacesMapInnerRef {
		if e := v.Validate(); len(e) > 0 {
			errs = append(errs, e...)
		}
	}

	return errs
}
