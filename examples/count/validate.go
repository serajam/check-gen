// Code generated by check-gen; DO NOT EDIT.
// Package count contains models and autogenerated validation code
package count

import (
	"fmt"
	"unicode/utf8"
)

// Validate validates struct accordingly to fields tags
func (c Checker) Validate() []string {
	var errs []string
	if utf8.RuneCountInString(c.CyrillicLen) != 70 {
		errs = append(errs, "cyrillic_len::length_is_not::70")
	}
	if utf8.RuneCountInString(c.PolishLen) != 111 {
		errs = append(errs, "polish_len::length_is_not::111")
	}
	if utf8.RuneCountInString(c.GermanLen) != 120 {
		errs = append(errs, "german_len::length_is_not::120")
	}
	if utf8.RuneCountInString(c.CyrillicMin) < 70 {
		errs = append(errs, "cyrillic_min::min_length_is::70")
	}
	if utf8.RuneCountInString(c.PolishMin) < 111 {
		errs = append(errs, "polish_min::min_length_is::111")
	}
	if utf8.RuneCountInString(c.GermanMin) < 120 {
		errs = append(errs, "german_min::min_length_is::120")
	}
	if utf8.RuneCountInString(c.CyrillicMax) > 70 {
		errs = append(errs, "cyrillic_max::max_length_is::70")
	}
	if utf8.RuneCountInString(c.PolishMax) > 111 {
		errs = append(errs, "polish_max::max_length_is::111")
	}
	if utf8.RuneCountInString(c.GermanMax) > 120 {
		errs = append(errs, "german_max::max_length_is::120")
	}

	return errs
}

// Validate validates struct accordingly to fields tags
func (c CheckerRef) Validate() []string {
	var errs []string
	if c.CyrillicLen != nil && utf8.RuneCountInString(*c.CyrillicLen) != 70 {
		errs = append(errs, "cyrillic_len::length_is_not::70")
	}
	if c.PolishLen != nil && utf8.RuneCountInString(*c.PolishLen) != 111 {
		errs = append(errs, "polish_len::length_is_not::111")
	}
	if c.GermanLen != nil && utf8.RuneCountInString(*c.GermanLen) != 120 {
		errs = append(errs, "german_len::length_is_not::120")
	}
	if c.CyrillicMin != nil && utf8.RuneCountInString(*c.CyrillicMin) < 70 {
		errs = append(errs, "cyrillic_min::min_length_is::70")
	}
	if c.PolishMin != nil && utf8.RuneCountInString(*c.PolishMin) < 111 {
		errs = append(errs, "polish_min::min_length_is::111")
	}
	if c.GermanMin != nil && utf8.RuneCountInString(*c.GermanMin) < 120 {
		errs = append(errs, "german_min::min_length_is::120")
	}
	if c.CyrillicMax != nil && utf8.RuneCountInString(*c.CyrillicMax) > 70 {
		errs = append(errs, "cyrillic_max::max_length_is::70")
	}
	if c.PolishMax != nil && utf8.RuneCountInString(*c.PolishMax) > 111 {
		errs = append(errs, "polish_max::max_length_is::111")
	}
	if c.GermanMax != nil && utf8.RuneCountInString(*c.GermanMax) > 120 {
		errs = append(errs, "german_max::max_length_is::120")
	}

	return errs
}

// Validate validates struct accordingly to fields tags
func (c CheckerSlice) Validate() []string {
	var errs []string
	for i, v := range c.Multiple {
		if utf8.RuneCountInString(v) != 513 {
			errs = append(errs, fmt.Sprintf("multiple_%v::length_is_not::513", i))
		}
	}
	for i, v := range c.MultipleRefs {
		if utf8.RuneCountInString(*v) != 513 {
			errs = append(errs, fmt.Sprintf("multiple_refs_%v::length_is_not::513", i))
		}
	}

	return errs
}
