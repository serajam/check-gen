// Code generated by check-gen; DO NOT EDIT.
// Package phone contains models and autogenerated validation code
package phone

import (
	"unicode"
)

// Validate validates struct accordingly to fields tags
func (u User) Validate() []string {
	var errs []string
	if len(u.Phone) > 0 {
		if len(u.Phone) == 1 {
			errs = append(errs, "phone::invalid_phone_format::wrong_length")
		} else {
			prefix, numbers := u.Phone[0], u.Phone[1:]

			if prefix != 43 {
				errs = append(errs, "phone::invalid_phone_format::should_be_started_with_'+'")
			}

			if len(numbers) < 7 || len(numbers) > 15 {
				errs = append(errs, "phone::invalid_phone_format::wrong_length")
			}

			for _, c := range numbers {
				if !unicode.IsDigit(c) {
					errs = append(errs, "phone::invalid_phone_format::not_a_digits")
					break
				}
			}
		}
	}
	if u.PhoneRef != nil && len(*u.PhoneRef) > 0 {
		if len(*u.PhoneRef) == 1 {
			errs = append(errs, "phone_ref::invalid_phone_format::wrong_length")
		} else {
			prefix, numbers := (*u.PhoneRef)[0], (*u.PhoneRef)[1:]

			if prefix != 43 {
				errs = append(errs, "phone_ref::invalid_phone_format::should_be_started_with_'+'")
			}

			if len(numbers) < 7 || len(numbers) > 15 {
				errs = append(errs, "phone_ref::invalid_phone_format::wrong_length")
			}

			for _, c := range numbers {
				if !unicode.IsDigit(c) {
					errs = append(errs, "phone_ref::invalid_phone_format::not_a_digits")
					break
				}
			}
		}
	}

	return errs
}
